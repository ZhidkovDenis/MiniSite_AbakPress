class PagesController < ApplicationController

  #Action add - отвечает за подготовку данных для формы "Добавление страницы"
  #Ключи принимаемых параметров:
  # => :urlPage - адрес родительской страницы
  #Маршруты к add: 
  # => get "*urlPage/add" => "pages#add"
  # => get "/add" => "pages#add", :urlPage => ""
  def add
    #создать новый экземпляр страницы
    @page = Page.new
    #проверить значение параметра адреса родительской страницы, и если оно не равно пустой строке 
    #(добавление не в корневой узел)
  	path = params[:urlPage].to_s
  	unless path.empty?
      #выполнить поиск родительской страницы по ее адресу
  		pageParent = Page.find(:first, :conditions => ["urlPage = ?", path])
      #если такая запись в БД отсутствует, вернуться на главную страницу и оповестить пользователя об ошибке
      #проверка необходима для случаев ручного ввода адреса пользователем в строке браузера 
  	  	if pageParent.nil?
  	  		flash.notice = "Невозможно добавить подстраницу: указан неверный адрес родительской страницы!"
    		  redirect_to root_path
  	  	else
          #иначе заполнить в объекте @page значения атрибутов идентификатора родителя (parentID) и адреса (urlPage)
  	  		@page.parentID = pageParent.id
          @page.urlPage = pageParent.urlPage + "/"
  	  	end
  	end
  end

  #Action create - обрабатывает данные, поступившие с формы "Добавление страницы", вызывает процедуру сохранения
  #страницы в БД
  #Ключи принимаемых параметров:
  # => :page - данные с формы добавления страницы
  #Маршруты к create: 
  # => post "pages/create"
  def create
    #создать новый экземпляр страницы с данными, поступившими с формы "Добавление страницы"
  	@page = Page.new(params[:page])
    #запомнить адрес родителя для его восстановления на случай ошибки сохранения страницы
    parentUrl = @page.urlPage 
    #Добавить к полю адреса имя создаваемой страницы, преобразовать текст страницы по установленным правилам
    @page.urlPage += @page.name
    @page.body = ConvertTextToHtmlTags(@page.body)
    #если сохранение прошло успешно
   	if @page.save
      #запросить просмотр добавленной страницы 
      #(перенаправление к экшену show с передачей адреса страницы в качестве параметра)
  		redirect_to :action => :show, :urlPage => @page.urlPage
    else #иначе в случае ошибки восстановить адрес родительской страницы и отрисовать представление добавления страницы
      @page.urlPage = parentUrl
      render :add
    end
  end

  #Action edit - отвечает за подготовку данных для формы "Редактирование страницы"
  #Ключи принимаемых параметров:
  # => :urlPage - адрес редактируемой страницы
  #Маршруты к edit: 
  # => get "*urlPage/edit" => "pages#edit"
  def edit
    #Найти запрошенную страницу в БД по ее адресу
    @page = Page.find_by_urlPage(params[:urlPage].to_s)
    #если такая запись в БД отсутствует, вернуться на главную страницу и оповестить пользователя об ошибке
    #проверка необходима для случаев ручного ввода адреса пользователем в строке браузера 
    if @page.nil?
      flash.notice = "Указан неверный адрес страницы для редактирования!"
      redirect_to root_path
    else #иначе преобразовать содержимое найденной страницы по установленным правилам 
      @page.body = ConvertHtmlTagsToText(@page.body)
    end
  end

  #Action update - обрабатывает данные, поступившие с формы "Редактирование страницы", вызывает процедуру обновления
  #значений атрибутов страницы в БД
  #Ключи принимаемых параметров:
  # => :id - идентификатор редактируемой страницы
  # => :page - данные с формы редактирования страницы
  #Маршруты к update: 
  # =>  put "*urlPage" => "pages#update"
  def update
    #найти в БД редактируемую страницу по идентификатору
    @page = Page.find(params[:id])
    #создать страницу, наполненную данными с формы редактирования 
    tempPage = Page.new(params[:page])
    #если обновление атрибутов названия (:title) и содержимого (:body) страницы успешно
    if @page.update_attributes(:title => tempPage.title, :body => ConvertTextToHtmlTags(tempPage.body))
      #показать обновленную страницу
      redirect_to :action => :show, :urlPage => @page.urlPage
    else #иначе отрисовать форму редактирования
      @page.body = tempPage.body
      render :edit
    end
  end 

  #Action show - подготавливает данные запрашиваемой страницы для просмотра
  #Ключи принимаемых параметров:
  # => :urlPage - адрес запрашиваемой для просмотра страницы
  #Маршруты к show: 
  # =>  get "*urlPage" => "pages#show"
  def show
    #Найти в БД страницу по ее адресу, и, если она не найдена, вернуться на главную страницу с оповещением об ошибке 
  	@page = Page.find_by_urlPage(params[:urlPage].to_s)
  	  	if @page.nil?
  	  	  flash.notice = "Запрошенная страница не найдена!"
    		  redirect_to root_path
   	  	end
  end

  #Action index - подготавливает данные для главной страницы
  #Маршруты к index: 
  # =>  root :to => "pages#index"
  def index
    #загрузить из БД все корневые страницы
    @pages = Page.GetChildren(nil)
  end

  #Преобразует входной текст, заключая его содержимое в теги Html по установленным соглашениям
  #Входные параметры:
  # - body - преобразуемый текст
  def ConvertTextToHtmlTags(body)
    result = body.gsub(/\^\^([А-Яа-я\W\w\s]*?)\^\^/){"<b>"+$1+"</b>"} #замена вида ^^текст^^ => <b>текст</b>
    result = result.gsub(/\\\\([А-Яа-я\W\w\s]*?)\\\\/){"<i>"+$1+"</i>"} #замена вида \\текст\\ => <i>текст</i>
    #замена вида ((name1/name2 строка)) => <a href=/name1/name2>текст</a>
    result = result.gsub(/\(\(([\/А-Яа-я\w\/]*?)\s{1}([А-Яа-я\W\w\s]*?)\)\)/) {"<a href=/"+$1+">"+$2+"</a>"}
    return result  
  end

  #Преобразует входной текст, заменяя в нем теги Html на специальные символы по установленным соглашениям
  #Входные параметры:
  # - body - преобразуемый текст
  def ConvertHtmlTagsToText(body)
    result = body.gsub(/<b>([А-Яа-я\W\w\s]*?)<\/b>/){"^^"+$1+"^^"} #замена вида <b>текст</b> => ^^текст^^ 
    result = result.gsub(/<i>([А-Яа-я\W\w\s]*?)<\/i>/){"\\\\"+$1+"\\\\"} #замена вида <i>текст</i> => \\текст\\ 
    #замена вида <a href=/name1/name2>текст</a> => ((name1/name2 строка)) 
    result = result.gsub(/<a href=\/([\/А-Яа-я\w\/]*?)>([А-Яа-я\W\w\s]*?)<\/a>/){"(("+$1+" "+$2+"))"}
    return result   
  end 

end
